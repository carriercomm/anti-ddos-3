defProperty('resource1', "malicious2", "ID of a resource")
defProperty('resource2', "router1", "ID of a resource")
defProperty('resource3', "router2", "ID of a resource")
defProperty('resource4', "router3", "ID of a resource")
defProperty('resource5', "router4", "ID of a resource")
defProperty('resource6', "router5", "ID of a resource")
defProperty('resource7', "router6", "ID of a resource")
defProperty('resource8', "router7", "ID of a resource")
defProperty('resource9', "router8", "ID of a resource")
defProperty('resource10', "server", "ID of a resource")
defProperty('pathfile', "/tmp/drop_counter.csv", "Path to file")
defProperty('intervalcol',"1", "Interval to Tail")

defApplication('ping') do |app|
  app.description = 'Execute ping'
  app.binary_path = '/bin/ping 10.10.10.1' #ip of server
end

defApplication('dropcount') do |app|
  app.description = 'Simple Definition for the of-collect application'
  # Define the path to the binary executable for this application
  app.binary_path = '/tmp/count2.rb'
  app.defProperty('target', 'Address to output file', '-f', {:type => :string})
  app.defProperty("interval","Interval",'-i', {:type => :string})
  app.defMeasurement('wrapper_count') do |m|
    m.defMetric('client_id',:string)
    m.defMetric('drop',:int64)
  end
end

defApplication('trema') do |app|
  app.description = 'This app runs trema from command line'
  app.binary_path = '/bin/sh /tmp/anti-ddos-setup/trema.sh'
end

defApplication('push') do |app|
  app.description = 'This app runs trema from command line'
  app.binary_path = '/bin/sh /tmp/anti-ddos-setup/push.sh'
end

defGroup('Source1', property.resource1) do |node|
  node.addApplication("ping")
end

defGroup('Source2',
  property.resource2,
  property.resource3,
  property.resource4,
  property.resource5,
  property.resource6,
  property.resource7,
  property.resource8,
  property.resource9
  ) do |node|
  node.addApplication("dropcount") do |app|
    app.setProperty('target', property.pathfile)
    app.setProperty('interval', property.intervalcol)
    app.measure('wrapper_count', :samples => 1)
  end
end

defGroup('Source3',
  property.resource2,
  property.resource3,
  property.resource4,
  property.resource5,
  property.resource6,
  property.resource7,
  property.resource8,
  property.resource9
  ) do |node|
  node.addApplication("trema")
end

defGroup('Source4', property.resource10) do |node|
  node.addApplication("push")
end

onEvent(:ALL_UP_AND_INSTALLED) do |event|
  info "Starting the trace"
  #allGroups.startApplications
  after 1 do 
  group('Source3').startApplications
  end
  
  after 25 do 
  group('Source2').startApplications
  end
  
  after 35 do 
  group('Source1').startApplications
  end
  
  after 45 do 
  group('Source4').startApplications
  end
  
  after 8000 do
    info "Stopping the trace"
  allGroups.stopApplications
  Experiment.done
  end
end

defGraph 'drop_count' do |g|
  g.ms('wrapper_count').select(:oml_seq, :drop, :client_id) 
  g.caption "DROP"
  g.type 'line_chart3'
  g.mapping :x_axis => :oml_seq, :y_axis => :drop, :group_by => :client_id
  g.xaxis :legend => 'unix_ts'
  g.yaxis :legend => 'Dropped packets', :ticks => {:format => 'd'}
end
