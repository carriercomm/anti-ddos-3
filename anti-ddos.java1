law(simple,language(java))


import java.util.*;
import java.io.*;


public class simple extends Law{


        public void adopted(String args) {
         System.out.println("ADOPTED ");
         doAdd("budget(100)");
         doImposeObligation("addBudget", 1, "sec");
        }


        public void disconnected() {
         System.out.println("DISCONNECTED");

	 doQuit();

        }


        public void sent(String source, String message, String dest) {
	 System.out.println("SENT");

		if(message.equals("getCS")) {
			doDiscloseAllCS();
			return;
		}

		if (message.equals("SYN")){
			String synToY = "synTo(" + dest + ")";
			if( !CS.has(synToY) ){
				doAdd(synToY); 
            	doForward();
			}
		}
		
		if (message.equals("ACK")){
			String synToY = "synTo(" + dest + ")";
			String synAckFromY = "synAckFrom(" + dest + ")";
			
			if( CS.has(synToY) && CS.has(synAckFromY) ){
				doRemove(synToY); 
				doRemove(synAckFromY); 
           		doForward();
           	}
		}

	 int b = CS.fetchInt("budget");
	   if(b>0) {
		doDecr("budget", 1);
		doForward();
		return;
	    }
	System.out.println("No budget, drop");
        }

	public void arrived(String source, String message, String dest) {
	 System.out.println("ARRIVED");

		if (message.equals("SYN-ACK")){
			String synToY = "synTo(" + source + ")";
			String synAckFromY = "synAckFrom(" + source + ")";
			if( !CS.has(synToY) ){
				doForward(Self, "noSYN(" + Self + ")", source);
				return;
			}else{
				doAdd(synAckFromY); 
			}
		}

	 doDeliver();

	}

	public void exception(Message m, String failurecause) {
	 System.out.println("EXCEPTION "+m.ex_po+" "+failurecause);
	}

	public void obligationDue(Term obligationTerm) {

        if (obligationTerm.toString().equals("addBudget")) {
            doIncr("budget", 1);
            doImposeObligation("addBudget", 1, "sec");
            //doShowEvents("all", "all");
        }
    }

}



