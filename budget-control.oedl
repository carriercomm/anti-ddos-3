defProperty('resource1', "server", "ID of a resource")
defProperty('resource2', "malicious1", "ID of a resource")
defProperty('resource3', "controller1", "ID of a resource")
defProperty('resource4', "controller2", "ID of a resource")


defProperty('pathfile', "/tmp/packet_counter.csv", "Path to file")
defProperty('intervalcol',"1", "Interval to Tail")

defApplication('dropcount') do |app|
  app.description = 'Simple Definition for the of-collect application'
  # Define the path to the binary executable for this application
  app.binary_path = '/tmp/count1.rb'
  app.defProperty('target', 'Address to output file', '-f', {:type => :string})
  app.defProperty("interval","Interval",'-i', {:type => :string})
  app.defMeasurement('wrapper_count') do |m|
    m.defMetric('client_id',:string)
    m.defMetric('drop',:int64)
  end
end

defApplication('server') do |app|
  app.description = 'This app runs trema from command line'
  app.binary_path = '/bin/bash /tmp/anti-ddos-setup/server.sh anti-ddos.java1'
end

defApplication('client') do |app|
  app.description = 'This app runs trema from command line'
  app.binary_path = '/bin/bash /tmp/anti-ddos-setup/client.sh sss anti-ddos.java1'
end

defApplication('ctl') do |app|
  app.description = 'This app runs trema from command line'
  app.binary_path = '/bin/bash /tmp/anti-ddos-setup/ctl.sh'
end

#=begin
defGroup('Source1', property.resource1, property.resource2) do |node|
  node.addApplication("dropcount") do |app|
    app.setProperty('target', property.pathfile)
    app.setProperty('interval', property.intervalcol)
    app.measure('wrapper_count', :samples => 1)
  end
end
#=end

defGroup('Source2', property.resource3, property.resource4) do |node|
  node.addApplication("ctl")
end

defGroup('Source3', property.resource2) do |node|
  node.addApplication("client")
end

defGroup('Source4', property.resource1) do |node|
  node.addApplication("server")
end

onEvent(:ALL_UP_AND_INSTALLED) do |event|
  info "Starting the trace"
  #allGroups.startApplications
  after 1 do 
  group('Source2').startApplications
  end
  
  after 10 do 
  group('Source4').startApplications
  group('Source3').startApplications
  end
  
  after 15 do
  group('Source1').startApplications
  end
  
  after 8000 do
    info "Stopping the trace"
  allGroups.stopApplications
  Experiment.done
  end
end

#=begin
defGraph 'drop_count' do |g|
  g.ms('wrapper_count').select(:oml_seq, :drop, :client_id) 
  g.caption "Packets at Sender and Receiver"
  g.type 'line_chart3'
  g.mapping :x_axis => :oml_seq, :y_axis => :drop, :group_by => :client_id
  g.xaxis :legend => 'unix_ts'
  g.yaxis :legend => 'packets per second', :ticks => {:format => 'd'}
end
#=end
